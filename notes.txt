Stateless functional component: JS functions, simply return html (read jsx), optionally take in props as param.
Stateful class component: ES6 class extending Component class, must contain render method that returns html.

Fb has over 30k components!

Stateless functional component: Properties (props) -> JS Function -> HTML (JSX)
- If there is no content between tags, then you can self-close the tag.
- Class component can also receive props, has an internal state and returns an HTML (JSX)
- For a class component, React along with Component must be imported.

Functional Component:
- Simple functions
- Use function components as much as possible
- Absence of 'this' keyword
- Forced to think of a solution without using state
- Mainly responsible for the UI
- Stateless/Dumb/Presentational components

Class Component:
- More feature rich
- Maintain their own private data - state
- Complex UI logic
- Provide lifecycle hooks
- Stateful/Smart/Container components

In react conf 2018, in react 16.7.0-alpha, they've announced hooks.
Hooks let you use state and other class features without writing a class.
No breaking changes!

JSX:
- Extension to JS language syntax.
- Write XML-like code for elements and components
- JSX tags have a tag name, attributes and children
- JSX is not a necessity to write React apps
- JSX makes your code concise, simpler and elegant
- JSX ultimately transpiles to pure JS which is understood by browsers.

- Each JSX call translates into a call to React.createElement.

JSX differences:
class -> className
for -> htmlFor
camelCase prop naming convention: onclick -> onClick, tabindex -> tabIndex

- className will change to class in React 18 probably.
- props is immutable

props vs. state:
props: 
- props get passed to component
- received as function parameters
- props are immutable
- props - Functional Components
this.props - Class Components

state:
- state is managed within the component
- variables declared in the function body
- state can be changed
- useState Hook - Functional Components
this.state - Class Components

- If you change this.state.count, then it wont re-render the DOM. You have to use this.setState();
- Calls to this.setState() are async. Meaning that if you try to reuse that value elsewhere, it wont be the same. Async:
this.setState({
	count: this.state.count + 1
});
console.log(this.state.count); // Inconsistent output

Sync (print message after state is updated through callback):
this.setState({
	count: this.state.count + 1
}, () => {
	console.log(this.state.count); // expected output
});

- multiple calls to setState where we have to update the state based on the previous state, simply pass a function to setState with the prevState as parameter. Otherwise, the calls will be grouped into one update call and inaccurate results will show.

- props are destructured differently in class component and functional component.

- Inside a functional component, if we do: 
function clickHandler() {
	console.log('Button clicked');
}

<button onClick={clickHandler}>Click!</button> 

Notice that we are passing the clickHandler handler instead of calling the function like clickHandler() because if we do that, then it will call the function without us having clicked it and will never call it when we click on button.

- this keyword is null in a class, unless you bind it.
1st approach: 
this.clickHandler.bind(this) 
is one way of binding it. Problem with this is that every setState will re-render the component, and render method will be called and so there will be a new event handler every time.

2nd approach: 
<button onClick={() => this.clickHandler()}>Btn</button>
is another way. Here we are calling the function. But same problem as above.

3rd approach (used by Fb as well):
Use 1st approach but in constructor.
class A extends Component {
	constructor() {
		...
		...
		this.clickHandler = this.clickHandler.bind(this)
	}
}

4th approach:
Define the method as an arrow function like so:
class X extends Component {
	constructor() {
		...
	}

	clickHandler = () => {

	}
}

Conditional rendering:
1) if else
2) Ternary operator
4) Short circuit operator: 
render() {
	this.state.isLoggedIn && <div>Welcome</div>
}

lists:


- You cant access key passed from prop inside the child element.

The below two lists only differ in the last element. React iterates over both lists and computes the difference, and sees that only the last element is different. React then mutates the DOM accordingly.
<ul>
	<li>Bruce</li>
	<li>Clarke</li>
</ul>

<ul>
	<li>Bruce</li>
	<li>Clarke</li>
	<li>Diana</li>
</ul>

Now, if we have:
<ul>
	<li>Bruce</li>
	<li>Clarke</li>
</ul>

<ul>
	<li>Diana</li>
	<li>Bruce</li>
	<li>Clarke</li>
</ul>

React will now compare the two lists, and finds that the two lists differ, so it renders the updated list completely without realising that two elements are indeed the same.
Hence we use keys as props in lists.

Index as key anti-pattern:
<ul>
	<li key="0">1</li>
	<li key="1">2</li>
	<li key="2">3</li>
</ul>

If you insert a new element at the top, it will have key="0" but React will think its value is 1 like before instead of blank.
Only use index as key if:
1. there is no unique id in a list
2. list is a static list and will not change
3. list will never be reordered or filtered

Styling React components:
1. CSS stylesheets
2. Inline Styling
3. CSS Modules
4. CSS in JS libraries (name of library: styled components)

- module approach of styling doesnt cause conflicts, whereas stylesheets apply to parent as well as child components.

Controlled components:
- such elements whose value is controlled by react is a controlle component.

Lifecycle methods:
- they dont exist on a functional component
- we can override them on class components

Mounting: When an instance of a component is being created and inserted into DOM
Updating: When a component is being re-rendered as a result of changes to either its props or state
Unmounting: When a component is being removed from DOM
Error handling: When there is an error during rendering, in a lifecycle method or in the constructor of any child component.

Mounting: constructor, static getDerivedStateFromProps, render and componentDidMount
Updating: static getDerivedStateFromProps, shouldComponentUpdate, render, getSnapshotBeforeUpdate, and componentDidUpdate
Unmounting: componentWillUnmount
Error Handling: static getDerivedStateFromError, and componentDidCatch

Mounting lifecycle methods:
In the order they're invoked:
1. constructor(props) - a special function that gets called whenever a new component is created.
It's used for initializing state and binding event handlers. Do not cause side-effects. Ex. HTTP requests.
Must call super(props) which calls constructor of Component to have access to props. 
Only place where you can directly overwrite state. this.state(...)
2. static getDerivedStateFromProps(props, state) - when the state of component depends on changes in props over time.
If the initial state of the component depends on props, then you use this method to set the state. it's a static method.
doesnt have access to 'this' keyword. You return the new object representing the new state.
Dont cause side-effects.

3. render() - only required method. read props & state and return JSX. it's a pure function. for a given props and state, it
should always render the same UI. dont change state or interact with DOM or make ajax calls. Children components lifecycle 
methods are also executed.

4. componentDidMount() - Only called once in the lifetime of component. Invoked immediately after a component and all its 
children components have been rendered to the DOM. Can cause side-effects. Ex. interact with DOM or perform any ajax calls
to load data.

Order of execution: (LifecycleB is a child of LifecycleA)

Lifecycle A constructor called
Lifecycle A getDerivedStateFromProps called
LifecycleA render called
Lifecycle B constructor called
Lifecycle B getDerivedStateFromProps called
LifecycleB render called
LifecycleB componentDidMount called
LifecycleA componentDidMount called


Updating lifecycle methods:
1. static getDerivedStateFromProps(props, state) - method is called every time a component is re-rendered.
has to return null or object that represents updated state. you can set state here.
dont cause side-effects. ex. http requests.

2. shouldComponentUpdate(nextProps, nextState) - dictates if the component should re-render or not.
by default, all components re-render when their state changes or props. this method can prevent that default behavior by
returning false. in this method, you can compare the existing props values with received props and return whether it should re
render or not. For performance optimization. Dont cause side-effects. Ex: HTTP requests or call setState methods.

3. render() - only required method. read props & state and return JSX. Dont change state or interact with DOM or make ajax calls.

4. getSnapshotBeforeUpdate(prevProps, prevState) - called right before the changes from the virtual DOM are to be reflected in 
the DOM. capture some information from the DOM like user's scroll position and maintain it after component updates. 
method will return either null or a value. Returned value will be passed as the third parameter to the next method ie. 
componentDidUpdate.

5. componentDidUpdate(prevProps, prevState, snapshot) - called after the render is finished in the re-render cycles.
guaranteed to be called only once in the re-render cycles. hence you can make ajax calls by comparing prevProps to newProps.

Order of execution after LifecycleA updates:
Lifecycle A getDerivedStateFromProps called
LifecycleA shouldComponentUpdate called
LifecycleA render called
Lifecycle B getDerivedStateFromProps called
LifecycleB shouldComponentUpdate called
LifecycleB render called
LifecycleB getSnapshotBeforeUpdate
LifecycleA getSnapshotBeforeUpdate
LifecycleB componentDidUpdate
LifecycleA componentDidUpdate

Unmounting phase method:
1. componentWillUnmount() - is invoked immediately before a component is unmounted and destroyed.
you can perform cleanup tasks here. like canceling network requests, removing event handlers, canceling any subscriptions and
also invalidating timers. dont call setState method.

Error handling phase methods:
1. static getDerivedStateFromError(error)
2. componentDidCatch(error, info)

When there is an error either during rendering, in a lifecycle method or in the constructor of any child component.

Fragments:
Lets you group a list of children without adding extra nodes to the DOM.

Different b/w Regular and Pure Component:
Regular component: a regular component does not implement the shouldComponentUpdate method. It always returns true by default.
Pure component: a PC on the other hand implements shouldComponentUpdate with a shallow props and state comparison.
a PC only works with class components, and not with functional comps.

Shallow comparison:
Primitive types: a SC with b returns true if a and b have the same value and are of the same type.
eg. string 'munnu' (SC) string 'munnu' returns true
Complex types: a SC with b returns true if a and b reference the exact same object.

=== is used for shallow comparison.

var a = [1, 2, 3]
var b = [1, 2, 3]
var c = a
var ab_eq = (a === b) // false, because they are different objects although their values are same
var ac_eq = (a === c) // true, because they reference the same object

Pure component checks if the prevProps and newProps have the same value, then it returns false in shouldComponentUpdate method.

A PC avoids unnecessary renders and can give you performance boost. 

Never mutate object or arrays in props or state. If you want to insert an item, dont mutate by pushing an item. The reference
to array never changes and because PC's only check for that, it wont re-render even if there is a difference.
Always return a new object or array when dealing with purecomponents.

It's a good idea when using PC's that its children are all also pure components.

Never mutate the state. Always return a new object for PC's.

Memo:
memo are to functional comps what PC's are to class components.
React.memo(functionalComponent) takes in a functional component, adds some stuff to it and returns an HOC (higher order comp)

Refs:
used to get a handle on an element. cannot be used with functional components. can only be used for elements or class 
components.

Portals: they provide a way to children into a DOM node that exists outside the hierarchy of the parent component.
They behave like normal children. Like event bubbling happens and the event propagates to the parent which renders the child,
and not where the portal is mounted.
Another reason why we want portals is for the children to escape the stylings of parent.

Error Boundary:
A class component that implements either one or both of the lifecycle methods getDerivedStateFromError or componentDidCatch
becomes an error boundary.
The static method getDerivedStateFromError method is used to render a fallback UI after an error is thrown and the 
componentDidCatch method is used to log the error info.
Error Boundary catches errors during rendering, lifecycle methods and in constructors of whole tree below them, however they
dont catch errors inside event handlers. If you want to catch errors in event handlers, use try-catch instead of error boundary.
Class component becomes an error boundary by defining either or both of getDerivedStateFromError and componentDidCatch lifecycle
methods.
Placement of EB also matters as it controls if the entire app should have the fallback UI or just the component causing the 
problem.
Provides a way to gracefully handle error in application code.

Higher Order Components:
Used for extracting out common functionality among different components.

Pattern where a function takes a component as an argument and returns a new component.
const enhancedComponent = higherOrderComponent(originalComponent)

const IronMan = withSuit(Tony Stark)

When passing props from parent to children which are returned from HOC, the props will be passed to the HOC rather than the
child. Solution is to pass the props received in HOC to the child using {...this.props}
 

